1) set matrix zeros
Brute force:
_________________________________________________________________________________
3)find next permutation.......if input is(1,2,3) then next permutation is (1,3,2)
class Solution {
    public int[] cal(int start,int end,int nums[]){
        while(start<=end){
            int temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
        }
        return nums;
    }
    public void nextPermutation(int[] nums) {
        int ind=-1;
        // int right=-1;
        for(int i=nums.length-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
                ind=i;
                break;
            }
        }
        if(ind==-1){
            cal(0,nums.length-1,nums);
            return;
        }
        for(int i=nums.length-1;i>ind;i--){
            if(nums[i]>nums[ind]){
                int temp=nums[i];
                nums[i]=nums[ind];
                nums[ind]=temp;
                break;
            }
        }
        cal(ind+1,nums.length-1,nums);
        return;
    }
}
--time comp: O(3N), where N = size of the given array
Finding the break-point, finding the next greater element, and reversal at the end takes O(N) for each, 
where N is the number of elements in the input array. This sums up to 3*O(N) which is approximately O(3N).
--SPACE: CONSTANT
_______________________________________________________________________________________________
4) Kadane's algo (max subarray sum)
class Solution {
    public int maxSubArray(int[] nums) {
        int maxsum=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<nums.length;i++){
            sum+=nums[i];
            if(sum>maxsum){
                maxsum=sum;
            }
            if(sum<0){
                sum=0;
            }
        }
        return maxsum;
          
    }
}
TIME COMP: O(N)
SPACE: O(1)
________________________________________________________---

