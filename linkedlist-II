# find the intersection point of linkedlist
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null){
            return null;  
        }
        ListNode a=headA;
        ListNode b=headB;
        while(a!=b){
            a=a==null?headB:a.next;
            b=b==null?headA:b.next;
        }
        return a;

    }
}
time: O(2*max(length of list1,length of list2))
space: O(1)
______________________________________________--
# detect cycle in ll

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        if(head==null || head.next==null){
            return false;
        }
        while(fast.next!=null && fast.next.next!=null){
            
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                return true;
            }
        }
        return false;
    }
}
time: O(N)
space:O(1)
________________________________________________-
# check whether linedlist is pallindrom

class Solution {
    public ListNode reverse(ListNode temp){
        ListNode prv=null;
        ListNode nex=null;
        while(temp!=null){
            nex=temp.next;
            temp.next=prv;
            prv=temp;
            temp=nex;
        }
        return prv;
    }
    public boolean isPalindrome(ListNode head) {
        if(head.next==null){
            return true;
        }
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null && fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
        }
        slow.next=reverse(slow.next);
        slow=slow.next;
        ListNode cur=head;
        while(slow!=null){
            if(slow.val!=cur.val){
                return false;
            }
            slow=slow.next;
            cur=cur.next;
        }
        return true;
    }
}
time:O(N/2)+O(N/2)+O(N/2);
space: O(1)
_____________________________________________
# find starting point of loop

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode cross=head;
        ListNode temp=null;
        if(head==null || head.next==null){
            return temp;
        }
        ListNode fast=head;
        ListNode slow=head;
        while(fast.next!=null && fast.next.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                while(slow!=cross){
                    slow=slow.next;
                    cross=cross.next;
                }
                return cross;
            }
        }
        return temp;
    }
}
time:O(N)
space: O(1)
___________________________________________________________

