# find the intersection point of linkedlist
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null){
            return null;  
        }
        ListNode a=headA;
        ListNode b=headB;
        while(a!=b){
            a=a==null?headB:a.next;
            b=b==null?headA:b.next;
        }
        return a;

    }
}
time: O(2*max(length of list1,length of list2))
space: O(1)
______________________________________________--
# detect cycle in ll

public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        if(head==null || head.next==null){
            return false;
        }
        while(fast.next!=null && fast.next.next!=null){
            
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                return true;
            }
        }
        return false;
    }
}
time: O(N)
space:O(1)
________________________________________________-

