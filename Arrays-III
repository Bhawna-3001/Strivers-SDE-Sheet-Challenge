# count which element ocurs more than n/2 times;--------
class Solution {
    public int majorityElement(int[] nums) {
        int ele=nums[0];
        int c=1;
        for(int i=1;i<nums.length;i++){
            if(c==0){
                ele=nums[i];
                c=1;
            }
            else if(nums[i]!=ele){
                c--;
            }else{
                c++;
            }
        }
        return ele;
    }
}
time: O(n)
______________________________________________________
# grid uniue paths (from top left to bottom right)--------
class Solution {
    public int uniquePaths(int m, int n) {
        int arr[][]=new int[m][n];
        for(int i=0;i<n;i++){
            arr[0][i]=1;
        }
        for(int i=0;i<m;i++){
            arr[i][0]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                arr[i][j]=arr[i-1][j]+arr[i][j-1];
            }
        }
        return arr[m-1][n-1];
    }
}
time(n*m)
_______________________________________________
# count reverse pairs------------------------

class Solution {
    private static void merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>();
        int left = low;    
        int right = mid + 1;
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }
        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }

    public int counts(int nums[],int start,int mid,int end){
        int c=0;
        int right=mid+1;
        for(int i=start;i<=mid;i++){
            while(right<=end && nums[i]>(2*nums[right])){
                right++;
            }
            c+=(right-(mid+1));
        }
        return c;
    }
    public int mergesort(int nums[],int start,int end){
        int count=0;
        if(start>=end){
            return count;
        }
        int mid=(start+end)/2;
        count+=mergesort(nums,start,mid);
        count+=mergesort(nums,mid+1,end);
        count+=counts(nums,start,mid,end);
        merge(nums,start,mid,end);
        return count;
    }
    public int reversePairs(int[] nums) {
        return mergesort(nums,0,nums.length-1);
    }
}
time: o(2n*logn)
space: n
___________________________________________________________
