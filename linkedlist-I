#reverse linkedlist------------------------------------------
class Solution {
    public ListNode reverse(ListNode head, ListNode temp){
        if(head!=null){
            ListNode parent=head.next;
            head.next=temp;
            temp=head;
            head=parent;
            temp=reverse(head,temp);
        }
        return temp;
    }
    public ListNode reverseList(ListNode head) {
        ListNode temp=null;
        return reverse(head,temp);
        
    }
}
time: o(N)
_______________________________________________________
# find middle of linkedlist
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
time: O(N)
__________________________________
# merge two sorted linked list
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null){return list2;}
        if(list2==null){return list1;}
        
        if(list1.val>list2.val){
            ListNode temp=list1;
            list1=list2;
            list2=temp;
        }
        ListNode res=list1;
        while(list1!=null && list2!=null){
            ListNode cur=null;
            while(list1!=null && list1.val<=list2.val){
                cur=list1;
                list1=list1.next;
            }
            cur.next=list2;
            ListNode temp=list1;
            list1=list2;
            list2=temp;
        }
        return res;
    }
}
time: O(n+m)
space: o(1)
_____________________________________________________________-
# delete nth node from the end
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp=new ListNode();
        temp.next=head;
        ListNode fast=temp;
        ListNode slow=temp;
        for(int i=1;i<=n;i++){
            fast=fast.next;
        }
        while(fast.next!=null){
            fast=fast.next;
            slow=slow.next;
        }
        slow.next=slow.next.next;
        return temp.next;
    }
}
time: o(n)
____________________________________________________________

